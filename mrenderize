#!/usr/bin/env ruby
# Ruby script for interfacing with mrender to produce volumetric
# visualizations

require 'optparse'
require 'open3'
require 'digest/sha1'

require File.join(File.expand_path(File.dirname(__FILE__)), "media-commands")

require 'rubygems'
require 'progressbar'

DEFAULT_RESOLUTION = [320, 240]
DEFAULT_NUM_THREADS = 16
TEMP_HEQ_SLICE_FORMAT = "temp-heq-slice-%06d.nrrd"

# # copied in for now
# mrender_string += " -fr -0.1 0 4.1"
# mrender_string += " -dn -1"
# mrender_string += " -di 0"
# mrender_string += " -df 1"
# mrender_string += " -up 0 -1 0"
# mrender_string += " -rh"
# mrender_string += " -ar"
# mrender_string += " -ur -1 1"
# mrender_string += " -vr -1 1"
# mrender_string += " -step 0.0008"
# mrender_string += " -nt 16"
# mrender_string += " -k00 cubic:1,0"
# mrender_string += " -k11 cubicd:1,0"
MRENDER_DEFAULTS = {
  :eye_pos => "-0.1 0 4.1",
  :look_at => "0 0 0",
  :near_clip => "-1",
  :image_distance => "0",
  :far_clip => "1",
  # :up => "0 -1 0",
  :right_handed => true,
  :at_relative => true,
  :u_range => "-1 1",
  :v_range => "-1 1",
  :step => "0.0008",
  :value_kernel => "cubic:1,0",
  :k1_kernel => "cubicd:1,0",
  :angle => "0",
}

# src/nrrd/enumsNrrd.c : _nrrdMeasureStr
valid_measures = [
  "min",
  "max",
  "mean",
  "median",
  "mode",
  "product",
  "sum",
  "L1",
  "L2",
  "Linf",
  "variance",
  "SD",
  "skew",
  "line-slope",
  "line-intercept",
  "line-error",
  "histo-min",
  "histo-max",
  "histo-mean",
  "histo-median",
  "histo-mode",
  "histo-product",
  "histo-sum",
  "histo-L2",
  "histo-variance",
  "histo-SD"
]

# src/gage/scl.c : _gageSclStrEqv
valid_queries = [
  "value", 
  "gradvec",
  "gradmag",
  "normal",
  "nperp", 
  "hessian",
  "laplacian",
  "hf",
  "heval",
  "heval0",
  "heval1",
  "heval2",
  "hevec",
  "hevec0",
  "hevec1",
  "hevec2",
  "2nddd",
  "geomten",
  "k1",
  "k2",
  "totalcurv",
  "st", # "shape trace",
  "si", # "shape index",
  "meancurv",
  "gausscurv",
  "curvdir1",
  "curvdir2",
  "flowlinecurv",
  "median"
]

mrender_bin = 'mrender'
filenames = []
@options = {
  :angle_range => (0..359),
  :angle_interval => 1,
  :output_resolution => DEFAULT_RESOLUTION,
  :show_frame_progress => false,
  :num_threads => DEFAULT_NUM_THREADS,
  :queries => ['val'],
  :measures => ['variance'],
  :cleanup => true,
  :heq => false,
  :up_vector => "0 -1 0",
  # max
}

OptionParser.new do |opts|
  opts.summary_width = 30
  opts.banner = "Usage: #{File.basename(__FILE__)} [options] filename.nrrd"

  def opts.show_usage
    puts self
    exit
  end
  
  opts.on("-l","--[no-]leave",
          "Leave intermediate files") do |cleanup|
    @options[:cleanup] = !cleanup
  end

  opts.on("--up v1,v2,v3", Array,
          "Up-vector") do |up_vector|
    @options[:up_vector] = up_vector.join(' ')
  end
  
  opts.on("-h","--[no-]heq",
          "Histogram equalization") do |heq|
    @options[:heq] = heq
  end
  
  opts.on("-nt THREADS","--num-threads=THREADS",
          "Number of threads for mrender (#{DEFAULT_NUM_THREADS})") do |threads|
    @options[:num_threads] = threads
  end
  
  opts.on("--is width,height", Array,
          "Output image/movie resolution (#{DEFAULT_RESOLUTION[0]},#{DEFAULT_RESOLUTION[1]})") do |resolution|
    @options[:output_resolution] = resolution
  end

  opts.on("--angles angle1,angle2", Array, 
          "Beginning and end angles for rendering (0,359)") do |angles|
    @options[:angle_range] = Range.new(angles[0],angles[1])
  end

  opts.on("-I INTERVAL","--interval=INTERVAL",
          "Interval at which to create projections") do |interval|
    @options[:angle_interval] = interval.to_i
  end
  
  opts.on("-C CAMERA_FILE","--camera_file=CAMERA_FILE",
          "Use camera file for mrender camera positions") do |camera_file|
    @options[:camera_file] = camera_file
  end
  
  opts.on("--colormap=COLORMAP",
          "Use colormap file for remapping after projection") do |colormap|
    @options[:colormap] = colormap
  end
  
  opts.on("--measures m1,m2,...", Array,
          "Value measures to render, any of: #{valid_measures.join(', ')}") do |measures|
    @options[:measures] = measures & valid_measures
  end
  
  opts.on("--queries q1,q2,...", Array,
          "Value queries to render, any of: #{valid_queries.join(', ')}") do |queries|
    @options[:queries] = queries & valid_queries
  end

  opts.show_usage if ARGV.empty?

  begin
    opts.order(ARGV) do |filename|
      filenames << filename
    end
  rescue OptionParser::ParseError => e
    opts.warn e.message
    opts.show_usage
  end
end

def execute_mrender(command, max)
  if @options[:show_frame_progress]
    puts "\n"
    bar = ProgressBar.new("mrender", max)
  end
  Open3.popen3(command) do |stdin, stdout, stderr|
    if @options[:show_frame_progress]
      stderr.each(" ") do |element|
        if element =~ /(\d+)\/#{max.to_s}/
          bar.set($1.to_i)
        end
      end
    else
      stderr.readlines
    end
  end
  bar.finish unless !@options[:show_frame_progress]
end

def short_sha(input_object)
  # 7 characters is *usually* enough to avoid collision
  return Digest::SHA1.hexdigest(input_object.to_yaml)[0..6]
end

# @options parsed, run renderings
render_count = 0
@options[:queries].each do |query|
  @options[:measures].each do |measure|
    cleanup_files = []
    output_parameters = []
    render_count += 1
    puts query + ", " + measure + " (" + render_count.to_s + "/" + 
      (@options[:queries].length*@options[:measures].length).to_s + ")"

    MRENDER_DEFAULTS[:output_resolution] = 
      @options[:output_resolution].join(' ')
    MRENDER_DEFAULTS[:up] = 
      @options[:up_vector]
    
    # use the content of the colormap in constructing the video file hash
    if @options.has_key? :colormap
      colormap_contents = File.read(File.expand_path(@options[:colormap]))
      output_parameters << colormap_contents
    end
    
    output_parameters << @options[:heq]
    
    mrender_full_parameters = []
    if @options.has_key? :camera_file
      camera_file = YAML.load_file(@options[:camera_file])
      camera_file.each do |camera_params|
        # merge last parameters so we don't have to respecify each frame
        camera_params =  mrender_full_parameters.last.merge(camera_params) unless
          mrender_full_parameters.last.nil?
        # merge against defaults so custom params overwrite them
        mrender_full_parameters << MRENDER_DEFAULTS.merge(camera_params)
      end
    else
      @options[:angle_range].each do |angle|
        mrender_full_parameters << MRENDER_DEFAULTS.merge({:angle => angle})
      end
    end

    mrender_parameters = []
    # Now filter the array at the specified interval using Numeric#step
    0.step(mrender_full_parameters.length, @options[:angle_interval]) do |parameter_position|
      mrender_parameters << mrender_full_parameters[parameter_position]
    end
    
    # puts mrender_parameters.to_yaml
    
    filename = filenames[0]
    output_video = sprintf("%s-%s-%s-video-%s.avi",
                     File.basename(filename, '.nrrd'), query, measure,
                      short_sha(mrender_parameters +
                                output_parameters))
    
    if File.exists?(output_video)
      puts output_video + " exists, skipping"
      next
    end
    
    output_files = []
    
    render_bar = ProgressBar.new("volume render", mrender_parameters.length + 1)
    render_bar.set(0)
    render_bar.show_progress
    frame = 0
    
    mrender_parameters.each do |parameter|
      mrender_string = "#{mrender_bin} -i #{filenames[0]}"
      mrender_string += " -turn #{parameter[:angle]}"
      mrender_string += " -is #{parameter[:output_resolution]}"
      mrender_string += " -k scalar"
      mrender_string += " -q #{query}"
      mrender_string += " -m #{measure}"
      mrender_string += " -nt #{@options[:num_threads]}"
      
      # per-frame parameters
      mrender_string += " -fr #{parameter[:eye_pos]}"
      mrender_string += " -at #{parameter[:look_at]}"
      mrender_string += " -dn #{parameter[:near_clip]}"
      mrender_string += " -di #{parameter[:image_distance]}"
      mrender_string += " -df #{parameter[:far_clip]}"
      mrender_string += " -up #{parameter[:up]}"
      mrender_string += parameter[:right_handed] ? " -rh" : ''
      mrender_string += parameter[:at_relative] ? " -ar" : ''
      mrender_string += " -ur #{parameter[:u_range]}"
      mrender_string += " -vr #{parameter[:v_range]}"
      mrender_string += " -step #{parameter[:step]}"
      mrender_string += " -k00 #{parameter[:value_kernel]}"
      mrender_string += " -k11 #{parameter[:k1_kernel]}"
  
      output_file = File.basename(filename, '.nrrd') +
                    sprintf("-%s-%s-render-%s.nrrd",
                      query, measure, short_sha(parameter))
  
      mrender_string += " -o #{output_file}"
  
      # puts angle.to_s + ": " + mrender_string
      # Open3.popen3(mrender_string) { |stdin, stdout, stderr| stderr.readlines }
      if File.exists?(output_file)
        puts output_file + " exists, skipping"
      else
        execute_mrender(mrender_string, @options[:output_resolution][1])
      end
  
      output_files << output_file
      render_bar.inc
      frame += 1
    end
    render_bar.finish
    
    if @options[:heq]
      heq_bar = ProgressBar.new("heq", mrender_parameters.length * 2)
      heq_slab_file = File.basename(filename, '.nrrd') +
                    sprintf("-%s-%s-slab-%s.nrrd",
                      query, measure, 
                      short_sha(mrender_parameters))
      if File.exists?(heq_slab_file)
        puts heq_slab_file + " exists, skipping slabify and heq"
      else
        # If we were to just histo equalize each frame individually, we'll get
        # interframe brightness inconsistencies because they won't be
        # equalized using the same mapping. We could calculate an equalization
        # mapping for one frame then apply it to the rest, but this method
        # (joining them into a slab then computing the mapping) gives a better
        # global result.
        puts "Slabifying..."
        system("unu join -a 2 -i #{output_files.join(' ')} -o #{heq_slab_file}")
        puts "Equalizing..."
        system("unu heq -b 3000 -a 0.8 -i #{heq_slab_file} -o #{heq_slab_file}")
      end
      cleanup_files << heq_slab_file
      
      diced = false
      slice = 0
      cleanup_files += output_files
      output_files.clear
      mrender_parameters.each do |parameter|
        hashed_heqd_file = File.basename(filename, '.nrrd') +
                            sprintf("-%s-%s-heq-%s.nrrd",
                              query, measure,
                              short_sha(parameter.merge({:heq => true})))
        if File.exists?(hashed_heqd_file)
          puts hashed_heqd_file + " exists, skipping"
        else
          if !diced
            puts "Dicing..."
            Open3.popen3("unu dice -a 2 -o ./ -i #{heq_slab_file} -ff #{TEMP_HEQ_SLICE_FORMAT}") do |stdin, stdout, stderr|
              stdout.each("\n") do |line|
                heq_bar.inc
              end
            end
            diced = true
          end
          slice_file = sprintf("#{TEMP_HEQ_SLICE_FORMAT}", slice)
          File.rename(slice_file, hashed_heqd_file)
        end
        output_files << hashed_heqd_file
        heq_bar.inc
        slice += 1
      end
      heq_bar.finish
    end
    
    if @options.has_key? :colormap
      colormap_bar = ProgressBar.new("colormap", mrender_parameters.length)

      rmapped_output_files = []
      frame = 0
      mrender_parameters.each do |parameter|
        rmapped_file = File.basename(filename, '.nrrd') +
                            sprintf("-%s-%s-rmap-%s.nrrd",
                              query, measure,
                              short_sha(parameter.merge({:heq => (@options[:heq] ? mrender_parameters : false), :colormap => colormap_contents})))
        if File.exists?(rmapped_file)
          puts rmapped_file + " exists, skipping"
        else
          Open3.popen3("unu rmap -m #{@options[:colormap]}" +
                       " -i #{output_files[frame]}" +
                       " -o #{rmapped_file}") do |stdin, stdout, stderr|
            stdout.readlines
          end
        end
        rmapped_output_files << rmapped_file
        colormap_bar.inc
        frame += 1
      end
      
      cleanup_files += output_files
      output_files = rmapped_output_files
      
      colormap_bar.finish
    end

    minmax_bar = ProgressBar.new("min/max calc", output_files.length)
    needs_nan_strip = false
    # compute min/max of output projections
    output_files.each do |input_nrrd|
      Open3.popen3("unu minmax #{input_nrrd}") do |stdin, stdout, stderr|
        stdout.each("\n") do |line|
          if line =~ /^min: (\d+\.?\d*)/
            this_min = $1.to_f
            @global_min ||= this_min
            @global_min = this_min < @global_min ? this_min : @global_min
          elsif line =~ /^max: (\d+\.?\d*)/
            this_max = $1.to_f
            @global_max ||= this_max
            @global_max = this_max > @global_max ? this_max : @global_max
          elsif line =~ /^# has non-existent values/
            needs_nan_strip = true
          end
        end
      end
      minmax_bar.inc
    end
    minmax_bar.finish

    # puts "min: #{@global_min}"
    # puts "max: #{@global_max}"
    
    if needs_nan_strip
      nan_bar = ProgressBar.new("NaN strip", output_files.length)
      output_files.each do |input_nrrd|
        Open3.popen3("unu 2op exists #{input_nrrd} 0 -o #{input_nrrd}") do |stdin, stdout, stderr|
          stdout.readlines
        end
        nan_bar.inc
      end
      nan_bar.finish
    end

    output_pngs = []
    frame = 0
    quantize_bar = ProgressBar.new("quantizing", mrender_parameters.length)
    # quantize into png's
    mrender_parameters.each do |parameter|
      output_png = File.basename(filename, '.nrrd') +
                    sprintf("-%s-%s-%03d-%s.png",
                      query, measure, output_pngs.length,
                      short_sha(parameter.merge({:heq => (@options[:heq] ? mrender_parameters : false), :colormap => colormap_contents})))
      if File.exists?(output_png)
        puts output_png + " exists, skipping"
      else
        quantize_string = "unu quantize" +
                          " -b 8 -min #{@global_min} -max #{@global_max}" + 
                          " -i #{output_files[frame]} -o #{output_png}"
        Open3.popen3(quantize_string) do |stdin, stdout, stderr|
          stdout.readlines
        end
      end
      output_pngs << output_png
      quantize_bar.inc
      frame += 1
    end
    quantize_bar.finish

    # convert to video
    optimal_bitrate = (60 * 25 * @options[:output_resolution][0].to_i * @options[:output_resolution][1].to_i / 256.0).to_i
    mencoder_options = "vbitrate=#{optimal_bitrate}:mbd=2:keyint=132:vqblur=1.0:cmp=2:subcmp=2:dia=2:mv0:last_pred=3"
    
    # write out media files list
    media_filename = File.basename(filename, '.nrrd') +
                     sprintf("-%s-%s-mf-%s.txt",
                     query, measure, short_sha(mrender_parameters))
    File.open(media_filename, 'w') {|f| f.write(output_pngs.join("\n"))}
    cleanup_files << media_filename

    # convert to video
    mencoder_string = "mencoder mf://@#{media_filename}" +
                      " -mf w=#{@options[:output_resolution][0]}:h=#{@options[:output_resolution][1]}:fps=29.97:type=png" +
                      " -o #{output_video}" +
                      " -ovc lavc -lavcopts vcodec=msmpeg4v2:#{mencoder_options}" +
                      " 2>&1"
    # puts mencoder_string
    safe_execute do
      execute_mencoder(mencoder_string)
    end   
    puts "Output: " + output_video

    
    if @options[:cleanup]
      cleanup_files += output_pngs + output_files
      cleanup_bar = ProgressBar.new("cleanup", cleanup_files.length)
      cleanup_files.each do |cleanup|
        File.unlink(cleanup)
        cleanup_bar.inc
      end
      cleanup_bar.finish
    end
  end
end
